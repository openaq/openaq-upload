service: openaq-upload-tool

plugins:
  - serverless-offline

custom:
  bucket: ${file(./secrets_${opt:stage, 'dev'}.json):BUCKET_NAME}
  dynamotable: ${file(./secrets_${opt:stage, 'dev'}.json):TABLE_NAME}

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  environment:
    AUTH0_CLIENT_ID: ${file(./secrets_${opt:stage, 'dev'}.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key_${opt:stage, 'dev'})}
    BUCKET: ${file(./secrets_${opt:stage, 'dev'}.json):BUCKET_NAME}
    TABLE: ${file(./secrets_${opt:stage, 'dev'}.json):TABLE_NAME}
    DB_REGION: ${opt:region, self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 's3:*'
      Resource:
        - "arn:aws:s3:::${self:custom.bucket}/*"
        - "arn:aws:s3:::${self:custom.bucket}"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE}"
        

functions:
  auth:
    handler: handler.auth
  uploadData:
    handler: handler.uploadData
    events:
      - http:
          path: api/private
          method: post
          authorizer: auth
          cors: true
  clearS3Bucket: 
    handler: handler.clearS3Bucket
    events:
      - schedule: rate(2 days)

resources:
  Resources:
    # # Uncomment below to S3 create bucket – remember you will need to add a policy (see README.md)
    # UploadToolBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:custom.bucket}
    LoggingDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.dynamotable}
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

