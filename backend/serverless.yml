service: openaq-upload-tool

plugins:
  - serverless-offline

custom:
  bucket: upload-tool-bucket-${opt:stage, 'dev'}

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  environment:
    AUTH0_CLIENT_ID: ${file(./secrets_${opt:stage, 'dev'}.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key_${opt:stage, 'dev'})}
    BUCKET: ${self:custom.bucket}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 's3:*'
      Resource:
        - "arn:aws:s3:::${self:custom.bucket}/*"
        - "arn:aws:s3:::${self:custom.bucket}"

functions:
  auth:
    handler: handler.auth
  uploadData:
    handler: handler.uploadData
    events:
      - http:
          path: api/private
          method: post
          authorizer: auth
          cors: true
  clearS3Bucket: 
    handler: handler.clearS3Bucket
    events:
      - schedule: rate(2 days)

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
